#!/bin/bash
# filename: session_mgr

# problem:
# I have more than one workspace in my home directory. 
#		${HOME}/
#			debug/
#			release/
#			hotfix/
# I have three different Xshell-session files that can login different workspace
#		session/
#			debug.xsh
#			release.xsh
#			hotfix.xsh
# If I connect to remote server with 'debug.xsh', I want to change directory to ${HOME}/debug/ automatically.
# This can be archieved with login-script. BUT the login-script isn't executed when a new connection is duplicated.

# This script provides a way to tag a session(a group of ssh connections that belong to one session).
# All ssh connections that belong to one session has the same tag.
# When a new session is created, this file should be executed as "session_mgr tag_of_this_session". With Xshell, this can be done with login-script.
# And when a new connection is duplicated, the function `init_env_according_to_session_tag` in file(.bash_func.d/session_mgr.func) will be executed.

# usage:
# 1. to tag a session with 'tag'. try to execute "session_mgr hotfix"
# 2. init work environment according to current session tag
#		usage: session_cfg

# related files:
#		${HOME}/.session_mgr_rti
# 		${HOME}/.session_mgr_cfg

# environment:
#		${SESSION_TAG} tag of current session

# format: session-pid tag
#		33042 vim
# 		33042 gamedev
SESSION_RUNTIME_INFO_FILE=$HOME/.session_mgr_rti
SESSION_RUNTIME_INFO_FILE_TMP=$HOME/.session_mgr_rti.tmp

if [ ! -f ${SESSION_RUNTIME_INFO_FILE} ]
then
	touch ${SESSION_RUNTIME_INFO_FILE}
fi

# format: tag default-pwd
#		myenv ${HOME}/myproject/myenv.git
SESSION_CONFIG_FILE=$HOME/.session_mgr_cfg

if [ ! -f ${SESSION_CONFIG_FILE} ]
then
	touch ${SESSION_CONFIG_FILE}
fi


if [ $# -le 0 ]
then 
	session_pid=`pid_of_current_session`
	grep "${session_pid}" ${SESSION_RUNTIME_INFO_FILE} | cut -d' ' -f2

else # add new record into runtime-file
	tag=$1

	session_pid=`pid_of_current_session`
	sed -i "/${session_pid}/d" ${SESSION_RUNTIME_INFO_FILE}
	echo "${session_pid} ${tag}" >> ${SESSION_RUNTIME_INFO_FILE}
fi

# clean runtime-file
echo -n "" > ${SESSION_RUNTIME_INFO_FILE_TMP}
while read line
do
	if [ -z "$line" ]
	then
		continue
	fi
	pid=`echo $line | cut -d' ' -f1`
	tag=`echo $line | cut -d' ' -f2`
	ps ux | grep  "[ ]${pid}" | grep -q sshd
	if [ $? -eq 0 ]
	then
		echo "${pid} ${tag}" >> ${SESSION_RUNTIME_INFO_FILE_TMP}
	fi
done < ${SESSION_RUNTIME_INFO_FILE}
mv ${SESSION_RUNTIME_INFO_FILE_TMP} ${SESSION_RUNTIME_INFO_FILE}
